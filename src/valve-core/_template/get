#!/bin/bash

CUR_DIR=${0%/*}
CUR_OBJECT=`echo $CUR_DIR | cut -d "/" -f6`
CUR_NAME=${0##*/}

####### common functions
source ${ROOT_SHELL_DIR}/common.sh


readonly SHORT_OPT="hvadspcmi"
readonly LONG_OPT="help,verbose,all,helm,deployments,services,pods,containers,configmap,hpa,ing"

_help() {
    cat <<EOF
================================================================================
Usage: valve ${CUR_NAME} {Params}                               로컬 클러스터에 배포한 app과 관련된 자원을 보여줍니다. 아래 Params를 이용합니다.
                                                                helm/deployment/service/pod/container/configmap/hpa를 보여줍니다.

Params:
    -h, --help                                                  valve get 화면을 보여줍니다.

    -a, --all                       (optional)                  로컬 클러스터에 배포한 app과 관련된 모든 자원을 보여줍니다. (helm/deployment/service/pod/container/configmap/hpa)
    --helm                          (optional)                  로컬 클러스터에 배포한 app의 helm 정보를 보여줍니다.
    -d,--deployments                (optional)                  로컬 클러스터에 배포한 app의 deployment 정보를 보여줍니다.
    -s,--services                   (optional)                  로컬 클러스터에 배포한 app의 service 정보를 보여줍니다.
    -p,--pods                       (optional)                  로컬 클러스터에 배포한 app의 pod 정보를 보여줍니다.
    -c,--containers                 (optional)                  로컬 클러스터에 배포한 app의 container 정보를 보여줍니다.
    -m,--configmap                  (optional)                  로컬 클러스터에 배포한 app의 configmap 정보를 보여줍니다.
    --hpa                           (optional)                  로컬 클러스터에 배포한 app의 hpa정보를 보여줍니다.
    -i, --ing                       (optional)                  로컬 클러스터에 배포한 app의 주소를 보여줍니다.

Examples:
    $ valve get -h / valve get --help
    $ valve get -a / valve get --all
    $ valve get --helm
    $ valve get -d / valve get --deployments
    $ valve get -s / valve get --services
    $ valve get -p / valve get --pods
    $ valve get -c / valve get --containers
    $ valve get -m / valve get --configmap
    $ valve get --hpa
    $ valve get -i / vlave get --ing
================================================================================
EOF
}

_run() {

    OPTIONS=$(getopt -l "${LONG_OPT}" -o "${SHORT_OPT}" -a -- "$@"  2>${CUR_DIR}/.tmp)
    if  [ $? -eq 1 ]; then
        _help
        _error "Error params: `cat ${CUR_DIR}/.tmp && rm -f ${CUR_DIR}/.tmp `"
    fi
    eval set -- "${OPTIONS}"

    while [ $# -gt 0 ]; do
        case "$1" in
            -a|--all)
                PARAM_ALL=true
                ;;
            --helm)
                PARAM_HELM=true
                ;;
            -d|--deployments)
                PARAM_DEPLOY=true
                ;;
            -s|--services)
                PARAM_SERVICE=true
                ;;
            -p|--pods)
                PARAM_POD=true
                ;;
            -c|--containers)
                PARAM_CONTAINER=true
                ;;
            -m|--configmap)
                PARAM_CONFIGMAP=true
                ;;
            --hpa)
                PARAM_HPA=true
                ;;
            -i|--ing)
                PARAM_ING=true
                ;;
            -h|--help)
                _help
                exit 0
                ;;
            -v|--verbose)
                DEBUG_MODE=true
                VERBOSE=$(($VERBOSE + 1))
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    if [ "${PARAM_ALL}" == "true" ]; then
        _all_get
    elif [ "${PARAM_HELM}" == "true" ]; then
        _helm_get
    elif [ "${PARAM_DEPLOY}" == "true" ]; then
        _deploy_get
    elif [ "${PARAM_SERVICE}" == "true" ]; then
        _service_get
    elif [ "${PARAM_POD}" == "true" ]; then
        _pod_get
    elif [ "${PARAM_CONTAINER}" == "true" ]; then
        _container_get
    elif [ "${PARAM_CONFIGMAP}" == "true" ]; then
        _configmap_get
    elif [ "${PARAM_HPA}" == "true" ]; then
        _hpa_get
    elif [ "${PARAM_ING}" == "true" ]; then
        _ing_get
    else
        _error "Use valve get -h or valve get --help"
    fi
}

##################################################################################

_all_get() {
    _debug_mode

    _command "helm ls --all"
    helm ls --all

    _command "kubectl get all --all-namespaces"
    kubectl get all --all-namespaces
    _success
}

_helm_get() {
    _debug_mode

    _command "helm ls --all | grep ${NAMESPACE}"
    helm ls --all | grep ${NAMESPACE}

    _command "kubectl get pod,svc,ing -n ${NAMESPACE}"
    kubectl get pod,svc,ing -n ${NAMESPACE}
    _success
}

_deploy_get() {
    _debug_mode

    _command "kubectl get deployment -n ${NAMESPACE}"
    kubectl get deployment -n ${NAMESPACE}
    echo -e
    kubectl get ing -n ${NAMESPACE}
    _success
}

_service_get() {
    _debug_mode

    _command "kubectl get svc -n ${NAMESPACE}"
    kubectl get svc -n ${NAMESPACE}
    _success
}

_pod_get() {
    _debug_mode

    _command "kubectl get pod -n ${NAMESPACE}"
    kubectl get pod -n ${NAMESPACE}
    _success
}

_container_get() {
    _debug_mode

    _command "kubectl get pods -n ${NAMESPACE} -o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name"
    kubectl get pods -ndevelopment -o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name
    _success
}

_configmap_get() {
    _debug_mode
    _command "kubectl get configmap -n ${NAMESPACE}"
    kubectl get configmap -n ${NAMESPACE}
    _success
}

_hpa_get() {
    _debug_mode
    _command "kubectl get hpa -n ${NAMESPACE}"
    kubectl get hpa -n ${NAMESPACE}

    _command "kubectl describe hpa -n ${NAMESPACE}"
    kubectl describe hpa -n ${NAMESPACE}
    _success
}

_ing_get() {
    _debug_mode
    ING_URL=$(kubectl get ing -n ${NAMESPACE} | awk -F' ' '{print $2}' | sed '1d')

    _result "URL = "${ING_URL}
    _success
}
##################################################################################

_run $@